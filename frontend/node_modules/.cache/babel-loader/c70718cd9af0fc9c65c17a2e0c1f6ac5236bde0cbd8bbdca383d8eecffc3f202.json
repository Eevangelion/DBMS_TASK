{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react';\nconst apiHost = process.env.REACT_APP_API_HOST;\nexport const searchService = createApi({\n  reducerPath: 'searchAPI',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `http://${apiHost}/search`\n  }),\n  endpoints: build => ({\n    getJokes: build.query({\n      query: function (q, t) {\n        const queryArg = q;\n        const typeArg = t;\n        for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          params[_key - 2] = arguments[_key];\n        }\n        const pageArg = params.page;\n        const args = params.page ? {\n          queryArg,\n          typeArg,\n          pageArg\n        } : {\n          queryArg,\n          typeArg\n        };\n        return {\n          url: '',\n          params: args\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetJokesQuery\n} = searchService;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiHost","process","env","REACT_APP_API_HOST","searchService","reducerPath","baseQuery","baseUrl","endpoints","build","getJokes","query","q","t","queryArg","typeArg","params","pageArg","page","args","url","useGetJokesQuery"],"sources":["/home/ivan/working/DBMS_TASK/frontend/src/services/Search.js"],"sourcesContent":["import {createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react'\n\nconst apiHost = process.env.REACT_APP_API_HOST;\n\n\nexport const searchService = createApi({\n    reducerPath: 'searchAPI',\n    baseQuery: fetchBaseQuery({ baseUrl: `http://${apiHost}/search`}),\n    endpoints: (build) => ({\n        getJokes: build.query({\n            query: (q, t, ...params) => {\n                const queryArg = q;\n                const typeArg = t;\n                const pageArg = params.page;\n                const args = params.page ? {queryArg, typeArg, pageArg} : {queryArg, typeArg};\n                return {\n                    url: '',\n                    params: args\n                }\n            },\n        }),\n    })\n})\n\nexport const {\n    useGetJokesQuery\n} = searchService;"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAE5E,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;AAG9C,OAAO,MAAMC,aAAa,GAAGN,SAAS,CAAC;EACnCO,WAAW,EAAE,WAAW;EACxBC,SAAS,EAAEP,cAAc,CAAC;IAAEQ,OAAO,EAAG,UAASP,OAAQ;EAAQ,CAAC,CAAC;EACjEQ,SAAS,EAAGC,KAAK,KAAM;IACnBC,QAAQ,EAAED,KAAK,CAACE,KAAK,CAAC;MAClBA,KAAK,EAAE,UAACC,CAAC,EAAEC,CAAC,EAAgB;QACxB,MAAMC,QAAQ,GAAGF,CAAC;QAClB,MAAMG,OAAO,GAAGF,CAAC;QAAC,kCAFLG,MAAM;UAANA,MAAM;QAAA;QAGnB,MAAMC,OAAO,GAAGD,MAAM,CAACE,IAAI;QAC3B,MAAMC,IAAI,GAAGH,MAAM,CAACE,IAAI,GAAG;UAACJ,QAAQ;UAAEC,OAAO;UAAEE;QAAO,CAAC,GAAG;UAACH,QAAQ;UAAEC;QAAO,CAAC;QAC7E,OAAO;UACHK,GAAG,EAAE,EAAE;UACPJ,MAAM,EAAEG;QACZ,CAAC;MACL;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTE;AACJ,CAAC,GAAGjB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}